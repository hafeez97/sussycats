{"ast":null,"code":"var _jsxFileName = \"D:\\\\work\\\\John\\\\vikings\\\\src\\\\Components\\\\Arena\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Sound from 'react-sound';\nimport { ethers } from 'ethers';\nimport SelectSound from '../../assets/select_hover.wav';\nimport AttackSound from '../../assets/dragon.wav';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport Vikings from '../../utils/Vikings.json';\nimport './Arena.css';\n/*\r\n * We pass in our characterNFT metadata so we can a cool card in our UI\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Arena = ({\n  characterNFT\n}) => {\n  _s();\n\n  // State\n  const [gameContract, setGameContract] = useState(null);\n  /*\r\n   * State that will hold our boss metadata\r\n   */\n\n  const [boss, setBoss] = useState(null);\n  const [attackState, setAttackState] = useState('');\n  const [isSelecting, setIsSelecting] = useState(false);\n  const [isAttacking, setIsAttacking] = useState(false);\n\n  const runAttackAction = async () => {\n    try {\n      if (gameContract) {\n        setIsAttacking(true);\n        setAttackState('attacking');\n        console.log('Attacking boss...');\n        const attackTxn = await gameContract.attackBoss();\n        await attackTxn.wait();\n        console.log('attackTxn:', attackTxn);\n        setAttackState('hit');\n        setIsAttacking(false);\n      }\n    } catch (error) {\n      console.error('Error attacking boss:', error);\n      setIsAttacking(false);\n      setAttackState('');\n    }\n  }; // UseEffects\n\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, Vikings.abi, signer);\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []);\n  useEffect(() => {\n    /*\r\n     * Setup async function that will get the boss from our contract and sets in state\r\n     */\n    const fetchBoss = async () => {\n      const bossTxn = await gameContract.getBigBoss();\n      console.log('Boss:', bossTxn);\n      setBoss(transformCharacterData(bossTxn));\n    };\n\n    if (gameContract) {\n      /*\r\n       * gameContract is ready to go! Let's fetch our boss\r\n       */\n      fetchBoss();\n    }\n  }, [gameContract]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"arena-title\",\n      children: [\"Attack $\", boss === null || boss === void 0 ? void 0 : boss.name, \"!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"arena-container\",\n      children: characterNFT && boss && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"players-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"player\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"health-bar\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"character-name\",\n              children: characterNFT.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"progress\", {\n              value: characterNFT.hp,\n              max: characterNFT.maxHp\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"progress-bar-text\",\n              children: `${characterNFT.hp} / ${characterNFT.maxHp} HP`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"image-content\",\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: characterNFT.imageURI,\n              alt: `Character ${characterNFT.name}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"stats\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [`⚔️ Attack Damage: `, /*#__PURE__*/_jsxDEV(\"span\", {\n                children: characterNFT.attackDamage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 101,\n                columnNumber: 40\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"attack-container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onMouseEnter: () => setIsSelecting(true),\n            onMouseLeave: () => setIsSelecting(false),\n            onClick: () => {\n              runAttackAction();\n            },\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: `https://ipfs.io/ipfs/QmPERvbAWHKSVXdNxreYj1drSYr7b88N3Afy8ETQEQXz8S`,\n              alt: `Axe`,\n              height: 160,\n              width: 140\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"boss-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `boss-content ${attackState}`,\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              className: \"character-name\",\n              children: boss === null || boss === void 0 ? void 0 : boss.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"health-bar\",\n              children: [/*#__PURE__*/_jsxDEV(\"progress\", {\n                value: boss.hp,\n                max: boss.maxHp\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 15\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: `${boss.hp} / ${boss.maxHp} HP`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 124,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 122,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"image-content\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: boss.imageURI,\n                alt: `Boss ${boss === null || boss === void 0 ? void 0 : boss.name}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 127,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 11\n          }, this), attackState === 'attacking' && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"stats\",\n            children: \"Attacking \\u2694\\uFE0F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      url: SelectSound,\n      playStatus: isSelecting ? Sound.status.PLAYING : Sound.status.STOPPED,\n      volume: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      url: AttackSound,\n      playStatus: isAttacking ? Sound.status.PLAYING : Sound.status.STOPPED,\n      volume: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Arena, \"FKaaS5k/gtVT1FvRQTkecbRa79I=\");\n\n_c = Arena;\nexport default Arena;\n\nvar _c;\n\n$RefreshReg$(_c, \"Arena\");","map":{"version":3,"sources":["D:/work/John/vikings/src/Components/Arena/index.js"],"names":["React","useEffect","useState","Sound","ethers","SelectSound","AttackSound","CONTRACT_ADDRESS","transformCharacterData","Vikings","Arena","characterNFT","gameContract","setGameContract","boss","setBoss","attackState","setAttackState","isSelecting","setIsSelecting","isAttacking","setIsAttacking","runAttackAction","console","log","attackTxn","attackBoss","wait","error","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","fetchBoss","bossTxn","getBigBoss","name","hp","maxHp","imageURI","attackDamage","status","PLAYING","STOPPED"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Sound from 'react-sound';\r\nimport { ethers } from 'ethers';\r\n\r\nimport SelectSound from '../../assets/select_hover.wav';\r\nimport AttackSound from '../../assets/dragon.wav';\r\n\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport Vikings from '../../utils/Vikings.json';\r\nimport './Arena.css';\r\n\r\n/*\r\n * We pass in our characterNFT metadata so we can a cool card in our UI\r\n */\r\nconst Arena = ({ characterNFT }) => {\r\n  // State\r\n  const [gameContract, setGameContract] = useState(null);\r\n  /*\r\n   * State that will hold our boss metadata\r\n   */\r\n  const [boss, setBoss] = useState(null);\r\n\r\n  const [attackState, setAttackState] = useState('');\r\n  const [isSelecting, setIsSelecting] = useState(false);\r\n  const [isAttacking, setIsAttacking] = useState(false);\r\n  \r\n  const runAttackAction = async () => {\r\n    try {\r\n      if (gameContract) {\r\n          setIsAttacking(true);\r\n          setAttackState('attacking');\r\n          console.log('Attacking boss...');\r\n          const attackTxn = await gameContract.attackBoss();\r\n          await attackTxn.wait();\r\n          console.log('attackTxn:', attackTxn);\r\n          setAttackState('hit');\r\n          setIsAttacking(false);\r\n      }\r\n    } catch (error) {\r\n        console.error('Error attacking boss:', error);\r\n        setIsAttacking(false);\r\n        setAttackState('');\r\n    }\r\n  };\r\n\r\n  // UseEffects\r\n  useEffect(() => {\r\n    const { ethereum } = window;\r\n\r\n    if (ethereum) {\r\n      const provider = new ethers.providers.Web3Provider(ethereum);\r\n      const signer = provider.getSigner();\r\n      const gameContract = new ethers.Contract(\r\n        CONTRACT_ADDRESS,\r\n        Vikings.abi,\r\n        signer\r\n      );\r\n\r\n      setGameContract(gameContract);\r\n    } else {\r\n      console.log('Ethereum object not found');\r\n    }\r\n  }, []);\r\n  \r\n  useEffect(() => {\r\n  /*\r\n   * Setup async function that will get the boss from our contract and sets in state\r\n   */\r\n  const fetchBoss = async () => {\r\n      const bossTxn = await gameContract.getBigBoss();\r\n      console.log('Boss:', bossTxn);\r\n      setBoss(transformCharacterData(bossTxn));\r\n  };\r\n  if (gameContract) {\r\n    /*\r\n     * gameContract is ready to go! Let's fetch our boss\r\n     */\r\n    fetchBoss();\r\n  }\r\n}, [gameContract]);\r\n\r\nreturn (\r\n  <>\r\n    <div className=\"arena-title\">Attack ${boss?.name}!</div>\r\n    <div className=\"arena-container\">\r\n      {characterNFT && boss && (\r\n        <div className=\"players-container\">\r\n          <span className=\"player\">\r\n            <div className=\"health-bar\">\r\n            <h2 className=\"character-name\">{characterNFT.name}</h2>\r\n              <progress value={characterNFT.hp} max={characterNFT.maxHp} />\r\n              <p className=\"progress-bar-text\">{`${characterNFT.hp} / ${characterNFT.maxHp} HP`}</p>\r\n            </div>\r\n            <div className=\"image-content\">\r\n              <img\r\n                src={characterNFT.imageURI}\r\n                alt={`Character ${characterNFT.name}`}\r\n              />\r\n            </div>\r\n          <div className=\"stats\">\r\n            <div>{`⚔️ Attack Damage: `}<span>{characterNFT.attackDamage}</span></div>\r\n          </div>\r\n        </span>\r\n        <span className=\"attack-container\">\r\n          <button \r\n            onMouseEnter={() => setIsSelecting(true)}\r\n            onMouseLeave={() => setIsSelecting(false)}\r\n            onClick={() => { runAttackAction()}}\r\n          >\r\n            <img\r\n              src={`https://ipfs.io/ipfs/QmPERvbAWHKSVXdNxreYj1drSYr7b88N3Afy8ETQEQXz8S`}\r\n              alt={`Axe`}\r\n              height={160}\r\n              width={140}\r\n            />\r\n          </button>\r\n        </span>\r\n        <span className=\"boss-container\">\r\n          {/* Add attackState to the className! After all, it's just class names */}\r\n          <div className={`boss-content ${attackState}`}>\r\n            <h2 className=\"character-name\">{boss?.name}</h2>\r\n            <div className=\"health-bar\">\r\n              <progress value={boss.hp} max={boss.maxHp} />\r\n              <p>{`${boss.hp} / ${boss.maxHp} HP`}</p>\r\n            </div>\r\n            <div className=\"image-content\">\r\n              <img src={boss.imageURI} alt={`Boss ${boss?.name}`} />\r\n            </div>\r\n          </div>\r\n          {attackState === 'attacking' && (\r\n                <p className=\"stats\">Attacking ⚔️</p>\r\n          )}\r\n          </span>\r\n        </div>\r\n      )}\r\n    </div>\r\n    <Sound\r\n      url={SelectSound}\r\n      playStatus={isSelecting ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n      volume={100}\r\n    />\r\n    <Sound\r\n      url={AttackSound}\r\n      playStatus={isAttacking ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n      volume={100}\r\n    />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Arena;"]},"metadata":{},"sourceType":"module"}