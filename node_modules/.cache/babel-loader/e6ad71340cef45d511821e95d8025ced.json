{"ast":null,"code":"var _jsxFileName = \"D:\\\\work\\\\John\\\\vikings\\\\src\\\\Components\\\\SelectCharacter\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Sound from 'react-sound';\nimport './SelectCharacter.css';\nimport { ethers } from 'ethers';\nimport LoadingIndicator from '../LoadingIndicator';\nimport SelectSound from '../../assets/select_hover.wav';\nimport MintSound from '../../assets/select_click.mp3';\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\nimport metaVikings from '../../utils/Vikings.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SelectCharacter = ({\n  setCharacterNFT\n}) => {\n  _s();\n\n  const [characters, setCharacters] = useState([]);\n  const [gameContract, setGameContract] = useState(null);\n  const [mintingCharacter, setMintingCharacter] = useState(false);\n  const [isSelecting, setIsSelecting] = useState(false); // UseEffect\n\n  useEffect(() => {\n    const {\n      ethereum\n    } = window;\n\n    if (ethereum) {\n      const provider = new ethers.providers.Web3Provider(ethereum);\n      const signer = provider.getSigner();\n      const gameContract = new ethers.Contract(CONTRACT_ADDRESS, metaVikings.abi, signer);\n      /*\r\n       * This is the big difference. Set our gameContract in state.\r\n       */\n\n      setGameContract(gameContract);\n    } else {\n      console.log('Ethereum object not found');\n    }\n  }, []); // Actions\n\n  const mintCharacterNFTAction = characterId => async () => {\n    try {\n      if (gameContract) {\n        setMintingCharacter(true);\n        console.log('Minting character in progress...');\n        const mintTxn = await gameContract.mintVikingNFT(characterId);\n        await mintTxn.wait();\n        console.log('mintTxn:', mintTxn);\n        setMintingCharacter(false);\n      }\n    } catch (error) {\n      console.warn('MintCharacterAction Error:', error);\n      setMintingCharacter(false);\n    }\n  };\n\n  useEffect(() => {\n    const getCharacters = async () => {\n      try {\n        console.log('Getting contract characters to mint');\n        const charactersTxn = await gameContract.getAllDefaultVikings();\n        console.log('charactersTxn:', charactersTxn);\n        const characters = charactersTxn.map(characterData => transformCharacterData(characterData));\n        setCharacters(characters);\n      } catch (error) {\n        console.error('Something went wrong fetching characters:', error);\n      }\n    };\n    /*\r\n     * Add a callback method that will fire when this event is received\r\n     */\n\n\n    const onCharacterMint = async (sender, tokenId, vikingIndex) => {\n      console.log(`VikingNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} vikingIndex: ${vikingIndex.toNumber()}`);\n      /*\r\n       * Once our character NFT is minted we can fetch the metadata from our contract\r\n       * and set it in state to move onto the Arena\r\n       */\n\n      if (gameContract) {\n        const characterNFT = await gameContract.checkIfUserHasNFT();\n        console.log('CharacterNFT: ', characterNFT);\n        setCharacterNFT(transformCharacterData(characterNFT));\n      }\n    };\n\n    if (gameContract) {\n      getCharacters();\n      /*\r\n       * Setup NFT Minted Listener\r\n       */\n\n      gameContract.on('VikingNFTMinted', onCharacterMint);\n    }\n\n    return () => {\n      /*\r\n       * When your component unmounts, let;s make sure to clean up this listener\r\n       */\n      if (gameContract) {\n        gameContract.off('VikingNFTMinted', onCharacterMint);\n      }\n    };\n  }, [setCharacterNFT, gameContract]);\n\n  const getClassEmoji = className => {\n    switch (className) {\n      case \"Warrior\":\n        return \"🗡️🦹🏻\";\n\n      case \"Mage\":\n        return \"🧙🏻‍♂️\";\n\n      case \"Raider\":\n        return \"🪓🦹🏻\";\n\n      case \"Shield Maiden\":\n        return \"🛡️🧝🏻‍♀️\";\n\n      case \"Demigod\":\n        return \"🧜🏻‍♂️\";\n\n      default:\n        return \"\";\n    }\n  }; // Render Methods\n\n\n  const renderCharacters = () => characters.map((character, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"character-item\",\n    onMouseEnter: () => setIsSelecting(true),\n    onMouseLeave: () => setIsSelecting(false),\n    onClick: mintCharacterNFTAction(index),\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"name-container\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: character.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: character.imageURI,\n      alt: character.name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"character-mint-button\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"character-mint-button-text\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Class: \", character.class, \" \", getClassEmoji(character.class)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"HP: \", character.hp, \" \\uD83E\\uDE78  ATK: \", character.attackDamage, \" \\u2694\\uFE0F\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 9\n    }, this)]\n  }, character.name, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 7\n  }, this));\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-title\",\n      children: \"Choose your Viking!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"select-character-container\",\n      children: [characters.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"character-grid\",\n        children: renderCharacters()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 13\n      }, this), mintingCharacter && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"indicator\",\n          children: [/*#__PURE__*/_jsxDEV(LoadingIndicator, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Minting In Progress...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      url: SelectSound,\n      playStatus: isSelecting ? Sound.status.PLAYING : Sound.status.STOPPED,\n      volume: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Sound, {\n      url: MintSound,\n      playStatus: mintingCharacter ? Sound.status.PLAYING : Sound.status.STOPPED,\n      volume: 100\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(SelectCharacter, \"0LFREbA2Af40blgxQifc9C35Ers=\");\n\n_c = SelectCharacter;\nexport default SelectCharacter;\n\nvar _c;\n\n$RefreshReg$(_c, \"SelectCharacter\");","map":{"version":3,"sources":["D:/work/John/vikings/src/Components/SelectCharacter/index.js"],"names":["React","useEffect","useState","Sound","ethers","LoadingIndicator","SelectSound","MintSound","CONTRACT_ADDRESS","transformCharacterData","metaVikings","SelectCharacter","setCharacterNFT","characters","setCharacters","gameContract","setGameContract","mintingCharacter","setMintingCharacter","isSelecting","setIsSelecting","ethereum","window","provider","providers","Web3Provider","signer","getSigner","Contract","abi","console","log","mintCharacterNFTAction","characterId","mintTxn","mintVikingNFT","wait","error","warn","getCharacters","charactersTxn","getAllDefaultVikings","map","characterData","onCharacterMint","sender","tokenId","vikingIndex","toNumber","characterNFT","checkIfUserHasNFT","on","off","getClassEmoji","className","renderCharacters","character","index","name","imageURI","class","hp","attackDamage","length","status","PLAYING","STOPPED"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Sound from 'react-sound';\r\nimport './SelectCharacter.css';\r\nimport { ethers } from 'ethers';\r\n\r\nimport LoadingIndicator from '../LoadingIndicator';\r\n\r\nimport SelectSound from '../../assets/select_hover.wav';\r\nimport MintSound from '../../assets/select_click.mp3';\r\n\r\nimport { CONTRACT_ADDRESS, transformCharacterData } from '../../constants';\r\nimport metaVikings from '../../utils/Vikings.json';\r\n\r\nconst SelectCharacter = ({ setCharacterNFT }) => {\r\n  const [characters, setCharacters] = useState([]);\r\n  const [gameContract, setGameContract] = useState(null);\r\n\r\n  const [mintingCharacter, setMintingCharacter] = useState(false);\r\n  const [isSelecting, setIsSelecting] = useState(false);\r\n\r\n  // UseEffect\r\n  useEffect(() => {\r\n  const { ethereum } = window;\r\n\r\n  if (ethereum) {\r\n    const provider = new ethers.providers.Web3Provider(ethereum);\r\n    const signer = provider.getSigner();\r\n    const gameContract = new ethers.Contract(\r\n      CONTRACT_ADDRESS,\r\n      metaVikings.abi,\r\n      signer\r\n    );\r\n\r\n    /*\r\n     * This is the big difference. Set our gameContract in state.\r\n     */\r\n    setGameContract(gameContract);\r\n  } else {\r\n    console.log('Ethereum object not found');\r\n  }\r\n}, []);\r\n\r\n  // Actions\r\n  const mintCharacterNFTAction = (characterId) => async () => {\r\n    try {\r\n      if (gameContract) {\r\n        setMintingCharacter(true);\r\n        console.log('Minting character in progress...');\r\n        const mintTxn = await gameContract.mintVikingNFT(characterId);\r\n        await mintTxn.wait();\r\n        console.log('mintTxn:', mintTxn);\r\n        setMintingCharacter(false);\r\n      }\r\n    } catch (error) {\r\n      console.warn('MintCharacterAction Error:', error);\r\n      setMintingCharacter(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const getCharacters = async () => {\r\n      try {\r\n        console.log('Getting contract characters to mint');\r\n  \r\n        const charactersTxn = await gameContract.getAllDefaultVikings();\r\n        console.log('charactersTxn:', charactersTxn);\r\n  \r\n        const characters = charactersTxn.map((characterData) =>\r\n          transformCharacterData(characterData)\r\n        );\r\n  \r\n        setCharacters(characters);\r\n      } catch (error) {\r\n        console.error('Something went wrong fetching characters:', error);\r\n      }\r\n    };\r\n  \r\n    /*\r\n     * Add a callback method that will fire when this event is received\r\n     */\r\n    const onCharacterMint = async (sender, tokenId, vikingIndex) => {\r\n      console.log(\r\n        `VikingNFTMinted - sender: ${sender} tokenId: ${tokenId.toNumber()} vikingIndex: ${vikingIndex.toNumber()}`\r\n      );\r\n  \r\n      /*\r\n       * Once our character NFT is minted we can fetch the metadata from our contract\r\n       * and set it in state to move onto the Arena\r\n       */\r\n      if (gameContract) {\r\n        const characterNFT = await gameContract.checkIfUserHasNFT();\r\n        console.log('CharacterNFT: ', characterNFT);\r\n        setCharacterNFT(transformCharacterData(characterNFT));\r\n      }\r\n    };\r\n  \r\n    if (gameContract) {\r\n      getCharacters();\r\n  \r\n      /*\r\n       * Setup NFT Minted Listener\r\n       */\r\n      gameContract.on('VikingNFTMinted', onCharacterMint);\r\n    }\r\n  \r\n    return () => {\r\n      /*\r\n       * When your component unmounts, let;s make sure to clean up this listener\r\n       */\r\n      if (gameContract) {\r\n        gameContract.off('VikingNFTMinted', onCharacterMint);\r\n      }\r\n    };\r\n  }, [setCharacterNFT, gameContract]);\r\n\r\n  const getClassEmoji = (className) => {\r\n    switch (className) {\r\n      case \"Warrior\": return \"🗡️🦹🏻\";\r\n      case \"Mage\": return \"🧙🏻‍♂️\";\r\n      case \"Raider\": return \"🪓🦹🏻\";\r\n      case \"Shield Maiden\": return \"🛡️🧝🏻‍♀️\";\r\n      case \"Demigod\": return \"🧜🏻‍♂️\";\r\n      default: return \"\";\r\n    }\r\n  }\r\n\r\n  // Render Methods\r\n  const renderCharacters = () =>\r\n    characters.map((character, index) => (\r\n      <div \r\n        className=\"character-item\"\r\n        key={character.name}\r\n        onMouseEnter={() => setIsSelecting(true)}\r\n        onMouseLeave={() => setIsSelecting(false)}\r\n        onClick={mintCharacterNFTAction(index)}\r\n      >\r\n        <div className=\"name-container\">\r\n          <p>{character.name}</p>\r\n        </div>\r\n        <img src={character.imageURI} alt={character.name} />\r\n        <div\r\n          className=\"character-mint-button\"\r\n        >\r\n          <div className=\"character-mint-button-text\">\r\n            <p>Class: {character.class} {getClassEmoji(character.class)}</p>\r\n            <p>HP: {character.hp} 🩸  ATK: {character.attackDamage} ⚔️</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    ));\r\n\r\n    return (\r\n      <>\r\n        <div className=\"select-title\">Choose your Viking!</div>\r\n        <div className=\"select-character-container\">\r\n          {characters.length > 0 && (\r\n            <div className=\"character-grid\">{renderCharacters()}</div>\r\n          )}\r\n          {/* Only show our loading state if mintingCharacter is true */}\r\n          {mintingCharacter && (\r\n            <div className=\"loading\">\r\n              <div className=\"indicator\">\r\n                <LoadingIndicator />\r\n                <p>Minting In Progress...</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <Sound\r\n          url={SelectSound}\r\n          playStatus={isSelecting ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n          volume={100}\r\n        />\r\n        <Sound\r\n          url={MintSound}\r\n          playStatus={mintingCharacter ? Sound.status.PLAYING : Sound.status.STOPPED}\r\n          volume={100}\r\n        />\r\n      </>\r\n    );\r\n};\r\nexport default SelectCharacter;"]},"metadata":{},"sourceType":"module"}